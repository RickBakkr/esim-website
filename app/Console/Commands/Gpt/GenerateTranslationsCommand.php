<?php

namespace App\Console\Commands\Gpt;

use App\Services\OpenaiService;
use Illuminate\Console\Command;

class GenerateTranslationsCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'gpt:generate-translations {--target=} {--origin=en}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';
    private OpenaiService $openaiService;

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->openaiService = new OpenaiService();

        $origin = $this->option('origin');
        $target = $this->option('target');

        if(!$target) {
            $this->error('Please provide a target language');
            return;
        }

        $this->info('Generating translations from ' . $origin . ' to ' . $target);

        $this->handleTranslation($origin, $target);
    }

    private function handleTranslation($origin, $target)
    {
        $baseDir = str_replace('/app', '', app_path());
        $originDir = $baseDir . "/lang/$origin";
        $targetDir = $baseDir . "/lang/$target";

        if (!is_dir($targetDir)) {
            mkdir($targetDir, 0777, true);
        }

        $originFiles = glob("$originDir/*");
        if(file_exists("$originDir.json")) {
            $originFiles[] = "$originDir.json";
        }

        foreach ($originFiles as $originFile) {
            $filename = basename($originFile);

            $fileFormat = null;
            if(str_contains($originFile, '.php')) {
                $originContent = include($originFile);
                $targetFile = "$targetDir/$filename";
                $fileFormat = 'php';
            } else if (str_contains($originFile, '.json')) {
                $originContent = json_decode(file_get_contents($originFile), true);
                $targetFile = "$targetDir.json";
                $fileFormat = 'json';
            } else {
                $this->error('Unsupported file format: ' . $originFile);
                continue;
            }

            if (file_exists($targetFile)) {
                $this->info('Merging translations for ' . $filename);

                if($fileFormat == 'php') {
                    $targetContent = include($targetFile);
                } else if($fileFormat == 'json') {
                    $targetContent = json_decode(file_get_contents($targetFile), true);
                }

                $mergedContent = $this->mergeTranslations($originContent, $targetContent, $origin, $target);
            } else {
                $this->info('Translating ' . $filename);
                $mergedContent = $this->translateContent($originContent, $origin, $target);
            }

            if($fileFormat == 'php') {
                $content = "<?php\n\n//This file is automatically generated. Do not modify.\n\nreturn " . varexport($mergedContent, true) . ";\n";
            } else if($fileFormat == 'json') {
                $content = json_encode($mergedContent, JSON_PRETTY_PRINT);
            }

            if(!empty($content)) {
                file_put_contents($targetFile, $content);
                $this->info('Translations saved to ' . $targetFile);
            }
        }
    }

    private function translateContent(mixed $originContent, string $origin, string $target)
    {
        if(is_array($originContent)) {
            return $this->translateArray($originContent, $origin, $target);
        } else if(is_string($originContent)) {
            return $this->translateString($originContent, $origin, $target);
        } else {
            $this->error('Unsupported content type: ' . gettype($originContent));
            return $originContent;
        }
    }

    private function translateString(string $originContent, string $origin, string $target) {
        return $this->openaiService->translateString($originContent, $origin, $target);
    }

    private function translateArray(array $originContent, string $origin, string $target)
    {
        $translatedArray = [];
        foreach ($originContent as $key => $value) {
            $translatedArray[$key] = $this->translateContent($value, $origin, $target);
        }

        return $translatedArray;
    }

    private function mergeTranslations(mixed $originContent, mixed $targetContent, string $origin, string $target)
    {
        foreach ($originContent as $key => $value) {
            if (!array_key_exists($key, $targetContent)) {
                $targetContent[$key] = $this->translateContent($value, $origin, $target);
            } else if(is_array($value)) {
                $targetContent[$key] = $this->mergeTranslations($value, $targetContent[$key], $origin, $target);
            }
        }

        return $targetContent;
    }
}
